import numpy as np
import pandas as pd
import pmdarima as pm
from pmdarima.arima import auto_arima

import matplotlib.pyplot as plt

import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import SimpleExpSmoothing, ExponentialSmoothing, Holt

df = pd.read_csv('/Users/marmutgram/Downloads/AAPL.csv')
df.head()

df['Mean_Price'] = (df['High'] + df['Low'])/2

df.reset_index()

df['Date'] = pd.to_datetime(df['Date'])
df = df.set_index('Date')
df_2022 = df.loc['2022']
df_2022=df_2022.dropna()

df_2022['Mean_Price'].plot(color='purple', figsize=(20,4))
plt.title('Mean Price')

df_2022.index.max

#plotting volume
df_2022['Volume'].plot(color='green', figsize=(20,4))
plt.title('Stock Volume')

df_2022.dropna()

df_2022["log"] = df_2022["Mean_Price"].apply(np.log)
df_2022

df_2022['log_diff'] = df_2022["log"].diff()
df_2022

df_2022[['Mean_Price','log','log_diff']]
df_2022

df_2022['log'].plot()
plt.show()

#differentiation of a time series to transform it into stationary

df_2022['log_diff'].plot()

#DFuller ORIGINAL
series = df_2022["Mean_Price"]
result_analysis = adfuller(series)
statistical_value = round(result_analysis[0], 3)
p_statistic = round(result_analysis[1], 3)
print("Statistical value of ADF of the precalculated tables: {}".format(-1.39))
print("statistical value: {}\n".format(statistical_value))

print("Level of significance to take the series as stationary {}".format(0.05))
print("p-statistic: {}\n".format(p_statistic))

#Diff series
series = df_2022["log_diff"].dropna()
result_analysis = adfuller(series)
statistical_value = round(result_analysis[0], 3)
p_statistic = round(result_analysis[1], 3)
print("Statistical value of ADF of the precalculated tables: {}".format(-1.39))
print("statistical value: {}\n".format(statistical_value))

print("Level of significance to take the series as stationary {}".format(0.05))
print("p-statistic: {}\n".format(p_statistic))

result_analysis

plot_acf(df_2022['log'], lags = 100)
#The second point is around 0.9 which means that following point (directly next one) is described in 90% by the previous value

plot_pacf(df_2022['log'], lags = 100)

TEST_SIZE = 36
train, test = df_2022.iloc[:-TEST_SIZE], df_2022.iloc[-TEST_SIZE:]
x_train, x_test = np.array(range(train.shape[0])), np.array(range(train.shape[0], df_2022.shape[0]))
train.shape, x_train.shape, test.shape, x_test.shape

fig, ax = plt.subplots(1, 1, figsize=(15, 5))
ax.plot(x_train, train)
ax.plot(x_test, test)
plt.title('Test_Train')


step_wise= auto_arima(y,
                  start_p=1, start_q=1,
                test='adf',
                  max_p=5, max_q=5,
                  d=1, max_d=7,
                  trace=True,
                  #will print status on the fits
                    error_action='ignore',
                    suppress_warnings=True,
                      stepwise=True)
                      
step_wise.summary()

# Forecast

prediction, confint = step_wise.predict(n_periods=TEST_SIZE, return_conf_int=True)

RESULTS_DICT = {}

model = sm.tsa.statespace.SARIMAX(
        endog = y,
        order = start_params,
        seasonal_order = seasonal_decompose,
        enforce_stationarity = False,
        enforce_invertibility = False
    )
model_fitted = model.fit()

print('ARIMA{}x{}12 - AIC:{}'.format(start_params, seasonal_decompose, model_fitted.aic))

RESULTS_DICT[param] = round(model_fitted.aic, 2)

prediction_series = pd.Series(prediction,index=test.index)
fig, ax = plt.subplots(1, 1, figsize=(15, 5))
ax.plot(prediction_series)
ax.fill_between(prediction_series.index,
                cf[0],
                cf[1],color='grey',alpha=.3)
